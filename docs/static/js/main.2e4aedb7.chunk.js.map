{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","filter","setFilter","name","setName","amount","setAmount","needToGet","ingredients","setIngredients","filterred","setFilterred","toggleNeedToGet","i","console","log","copy_of_ingredients","filterThoseIngredients","event","temp","item","className","disabled","onClick","map","element","key","onSubmit","preventDefault","target","value","newItem","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e4aedb7.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  \n  const [filter, setFilter] = useState('');\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [ingredients, setIngredients] = useState(\n    [\n      { name: 'flour' , amount: '2 cups' , needToGet: false},\n      { name: 'tomatos', amount: '4 cups', needToGet: true}\n    ]\n  );\n\n  const [filterred, setFilterred] = useState(\n    [\n      { name: 'flour' , amount: '2 cups' , needToGet: false},\n      { name: 'tomatos', amount: '4 cups', needToGet: true}\n    ]\n  );\n\n\n  const toggleNeedToGet = i => {\n    console.log(i);\n    let copy_of_ingredients = [...ingredients];\n    copy_of_ingredients[i].needToGet = !copy_of_ingredients[i].needToGet;\n    setIngredients(copy_of_ingredients);\n    console.log(copy_of_ingredients);     // should be the same ! \n    console.log(ingredients);             // should be the same ! \n  }// *** toggleNeedToGet => function\n\n\n  const addIngredient = event => {\n    event.preventDefault();\n    console.log('name=', event.target.name);\n    console.log('value=', event.target.value);\n    let newItem = { name, amount, needToGet: true};\n    console.log( newItem );\n    setIngredients( [...ingredients , newItem ]);     // Important added to both lists ! \n    setFilterred( [ ...filterred, newItem ]);         // Important added to both lists ! \n    setName('');\n    setAmount('');\n\n    // setTimeout( () => {                setTimeout() to implement the next statement that was below it ! \n    //   setFilterred( ingredients );\n    //   alert(\"Hi\");\n    // }, 1000);\n\n  }// ** addIngredient => function\n\n\n  const filterThoseIngredients = event => {\n\n    if (filter === 'All') {\n      setFilter('ToGet') \n      let temp = ingredients.filter( item => item.needToGet);\n      setFilterred( temp );\n    }\n    else {\n      setFilter('All');\n      setFilterred( ingredients );\n    }\n  }// ** filterThoseIngredients => function\n\n\n  return (\n\n\n    <div className=\"container\">\n\n\n      <div className=\"jumbotron\">\n        <h1>Grocery List</h1>\n      </div>\n      \n\n      {/* *** Bootstrap row & col *** */}\n\n      <div className=\"row\">         \n        <div className=\"col\">\n\n          {\n            filter === 'All'  ?\n            <>\n              <button className=\"btn btn-info\" disabled>All</button>\n              <button className=\"btn btn-info\" onClick={ filterThoseIngredients}>To get</button>\n            </>\n            :\n            <>\n              <button className=\"btn btn-info\" onClick={ filterThoseIngredients}>All</button>\n              <button className=\"btn btn-info\" disabled>To Get</button>\n            </>\n          }\n\n          <h1>{filter} Ingredients</h1>\n\n          <table className=\"table table-striped\"> \n            <tbody>\n              <tr>\n                <th>Need to Get:</th>\n                <th>Name:</th>\n                <th>Amount:</th>\n              </tr>\n              {\n                filterred.map( (element, i) =>\n                <tr key={i} className={ element.needToGet ? \"\" : \"have\"}>\n                  <td> \n                    {\n                      element.needToGet ? \n                      <button className=\"small btn btn-success\" onClick={ event => toggleNeedToGet(i)}>Yes</button> : \n                      <button className=\"small btn btn-danger\" onClick={ event => toggleNeedToGet(i)}>No</button>\n                    } \n                  </td>\n                  <td> {element.name} </td>\n                  <td> {element.amount} </td>\n                </tr>\n                )\n              }\n\n             \n            </tbody>\n          </table>\n\n        </div>\n\n\n        <div className=\"col\">\n\n              <form onSubmit={ addIngredient }>\n                \n                <div className=\"form-group\">\n                  <label>Name</label>\n                  <input \n                      type=\"text\" \n                      className=\"form-control\" \n                      onChange={ event => setName( event.target.value) }\n                      value={name}\n                  />\n                </div>\n                \n                <div className=\"form-group\">\n                  <label>Amount</label>\n                  <input \n                      type=\"text\" \n                      className=\"form-control\" \n                      onChange={ event => setAmount( event.target.value) }\n                      value={amount}\n                  />\n                </div>\n\n\n                <div >\n                  <input type=\"submit\" value=\"Add Ingredient\" className=\"btn btn-primary\" />\n                </div>\n\n              </form>\n\n        </div>\n\n      </div>\n\n      {/* *** Bootstrap row & col *** */}\n\n\n    </div>\n  );\n}// ** App component *************************************************\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}